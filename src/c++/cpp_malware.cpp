#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <cstring>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <dirent.h>

int main() {

	int sockfd, new_sockfd, recv_length;
	struct sockaddr_in serv_addr, client_addr;
	struct dirent *dent;
	DIR *dr;
	socklen_t sin_size;
	std::fstream myfile;

	myfile.open("/tmp/directory.txt");
	dr = opendir("/");

	puts("Creating Socket...");
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) {
		puts("Error: Could not create socket");
		exit(1);
	}
	puts("Socket was created");

	memset(&serv_addr, 0, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_port = htons(8080);
	inet_aton("127.0.0.1", &(serv_addr.sin_addr));

	puts("Binding Socket...");
	if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) == -1) {
		puts("Error: Could not bind to port");
		exit(1);
	}
	puts("Socket has binded");

	while (1) {
		puts("Listening...");
		if (listen(sockfd, 3) == -1) {
			puts("Error: Socket could not listen");
			exit(1);
		}

		sin_size = sizeof(struct sockaddr_in);
		new_sockfd = accept(sockfd, (struct sockaddr *) &client_addr, &sin_size);
		if (new_sockfd == -1) {
			puts("Error: Could not except connection");
			exit(1);
		}
		puts("Accepted connection");		
		
		while (1) {	
			char buffer[1024];

			if (strcmp(buffer, "exit\r\n") == 0) {
				close(new_sockfd);
				memset(&buffer, 0, 1024);
				break;
			}

			if (dr) {
				while ((dent = readdir(dr)) != NULL) {
					myfile << dent->d_name << "\n";
				}
				closedir(dr);
			}

			

			//recv_length = recv(new_sockfd, buffer, 1024, 0);
			printf("%s\n", buffer);
		}

	}
	return 0;
}
